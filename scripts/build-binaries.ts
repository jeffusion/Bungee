#!/usr/bin/env bun
/**
 * ÁºñËØë main.ts ‰∏∫Áã¨Á´ã‰∫åËøõÂà∂Êñá‰ª∂
 * Áî®Ê≥ï: bun scripts/build-binaries.ts
 */

import { $ } from 'bun';
import { existsSync, mkdirSync, readdirSync, unlinkSync } from 'fs';
import { join } from 'path';

const binDir = join(import.meta.dir, '../bin');
const mainSrc = join(import.meta.dir, '../packages/core/src/main.ts');

// Á°Æ‰øù bin ÁõÆÂΩïÂ≠òÂú®
if (!existsSync(binDir)) {
  mkdirSync(binDir, { recursive: true });
}

console.log('üî® Building binaries...\n');

const targets = [
  { name: 'bungee-linux', target: 'bun-linux-x64' },
  { name: 'bungee-macos', target: 'bun-darwin-x64' },
  { name: 'bungee-macos-arm64', target: 'bun-darwin-arm64' },
  // Windows ÊîØÊåÅÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
  // { name: 'bungee-windows.exe', target: 'bun-windows-x64' },
];

for (const { name, target } of targets) {
  const outfile = join(binDir, name);
  console.log(`üì¶ Building ${name} (${target})...`);

  try {
    await $`bun build --compile --target=${target} ${mainSrc} --outfile ${outfile}`;
    console.log(`‚úì ${name} built successfully\n`);
  } catch (error) {
    console.error(`‚ùå Failed to build ${name}:`, error);
    process.exit(1);
  }
}

console.log('‚úÖ All binaries built successfully!');
console.log(`üìÅ Output directory: ${binDir}\n`);

// Ê∏ÖÁêÜ .bun-build ‰∏¥Êó∂Êñá‰ª∂ÔºàÂú®È°πÁõÆÊ†πÁõÆÂΩïÔºâ
console.log('üßπ Cleaning up temporary files...');
try {
  const rootDir = join(import.meta.dir, '..');
  const files = readdirSync(rootDir);
  let cleanedCount = 0;

  for (const file of files) {
    if (file.endsWith('.bun-build')) {
      const filePath = join(rootDir, file);
      unlinkSync(filePath);
      cleanedCount++;
      console.log(`   Removed: ${file}`);
    }
  }

  if (cleanedCount > 0) {
    console.log(`‚úì Cleaned up ${cleanedCount} temporary file(s)\n`);
  } else {
    console.log('‚úì No temporary files to clean\n');
  }
} catch (error) {
  console.warn('‚ö†Ô∏è  Failed to clean up temporary files:', error);
}